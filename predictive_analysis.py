# -*- coding: utf-8 -*-
"""Predictive_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TCoMoFDfncwDUEN8IYTLWY5D6cB5UiIY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as snsx

data = pd.read_csv("/content/housing.csv")

data

data.info()

data.dropna(inplace = True)

data.info()

from sklearn.model_selection import train_test_split

X = data.drop(['median_house_value'], axis = 1)
y = data['median_house_value']

X

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2)

train_data = X_train.join(y_train)

train_data.hist(figsize = (15,8))

plt.figure(figsize = (15,8))
sns.heatmap(train_data.corr(), annot = True, cmap = "PiYG")

train_data['total_rooms'] = np.log(train_data['total_rooms'] + 1)
train_data['total_bedrooms'] = np.log(train_data['total_bedrooms'] + 1)
train_data['population'] = np.log(train_data['population'] + 1)
train_data['households'] = np.log(train_data['households'] + 1)

train_data.hist(figsize = (15,8))

train_data = train_data.join(pd.get_dummies(train_data.ocean_proximity)).drop(['ocean_proximity'],axis = 1)

plt.figure(figsize = (20,11))
sns.heatmap(train_data.corr(), annot = True, cmap = "PiYG")

plt.figure(figsize = (20,11))
sns.scatterplot(x="latitude", y="longitude", data = train_data, hue = "median_house_value", palette = "coolwarm")

train_data['bedroon_ratio'] = train_data['total_bedrooms']/train_data['total_rooms']
train_data['household_rooms'] = train_data['total_rooms']/train_data['households']

plt.figure(figsize = (20,11))
sns.heatmap(train_data.corr(), annot = True, cmap = "PiYG")

!pip install scikit-learn

from sklearn.linear_model import LinearRegression

X_train,y_train = train_data.drop(['median_house_value'], axis = 1), train_data['median_house_value']
reg = LinearRegression()
reg.fit(X_train,y_train)

test_data = X_test.join(y_test)

test_data['total_rooms'] = np.log(test_data['total_rooms'] + 1)
test_data['total_bedrooms'] = np.log(test_data['total_bedrooms'] + 1)
test_data['population'] = np.log(test_data['population'] + 1)
test_data['households'] = np.log(test_data['households'] + 1)

test_data = test_data.join(pd.get_dummies(test_data.ocean_proximity)).drop(['ocean_proximity'],axis = 1)

test_data['bedroon_ratio'] = test_data['total_bedrooms']/test_data['total_rooms']
test_data['household_rooms'] = test_data['total_rooms']/test_data['households']

X_test,y_test = test_data.drop(['median_house_value'], axis = 1), test_data['median_house_value']

test_data

reg.score(X_test,y_test)

from sklearn.ensemble import RandomForestRegressor

forest = RandomForestRegressor()

forest.fit(X_train, y_train)

forest.score(X_test,y_test)

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV

# Initialize the RandomForestRegressor model
forest = RandomForestRegressor()

# Define the parameter grid
param_grid = {
    "n_estimators": [3, 10, 30],
    "max_features": [2, 4, 6, 8]
}

# Initialize the GridSearchCV object
grid_search = GridSearchCV(forest, param_grid, cv=5,
                           scoring="neg_mean_squared_error",
                           return_train_score=True)

# Fit the model
grid_search.fit(X_train, y_train)



best_forest = grid_search.best_estimator_

best_forest.score(X_test,y_test)

"""# New Section"""